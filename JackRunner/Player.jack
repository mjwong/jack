class Player {
  field int x, y;
  field int px, py;
  field int jump, maxJump, maxJumpTime, jumpTime;
  field int gravity;
  field int height;
  field int width;

  constructor Player new () {
    let height = 16;
    let width = 16;
    let x = 255;
    let y = 100;
    let gravity = 1;
    let jump = 0;
    let maxJump = 20;
    let maxJumpTime = 4;
    let jumpTime = 0;

    return this;
  }

  method void step (Scene scene, int key) {
    var boolean doesCollideBottom, doesCollideRight;
    let px = x;
    let py = y;
    let doesCollideBottom = scene.doesCollideRect(x, y + height + gravity, x + width, y + height + gravity);
    let doesCollideRight = scene.doesCollideRect(x + width - 1, y, x + width, y + height - 1);
    if (key = 0) {
      let jumpTime = 0;
    }
    if (~doesCollideBottom) {
      let y = y + gravity;
      if (jump > 0) {
        let y = y - (jump/2);
        if (key = 32 & jumpTime > 0) { // space
          let jumpTime = jumpTime - 1;
        } else {
          let jump = jump - 1;
        }
      }
    } else {
      if (key = 32) { // space
        // jumping
        let jump = maxJump;
        let jumpTime = maxJumpTime;
        let y = y - 1;
      }
    }

    if (~doesCollideRight) {
      let x = x + 1;
    }

    return;
  }

  method int getLeft () {
    return x;
  }

  method int getBottom () {
    return y + height;
  }

  method void draw (int screenOffset) {
    var int memAddress;
    do Screen.setColor(true);
    do Screen.drawRectangle((px - screenOffset) + 1, py, ((px + width) - screenOffset) + 1, py + height);
    do Screen.setColor(false);
    do Screen.drawRectangle(x - screenOffset, y, x + width - screenOffset, y + height);
    return;
  }

  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}

