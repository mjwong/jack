// class Math

// static Array twoToThe ; 

// function void init ( ) { 
function Math.init 0

// let twoToThe = Array . new ( 16 ) ; 
push constant 16
call Array.new 1
pop static 0

// let twoToThe [ 0 ] = 1 ; 
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 1 ] = 2 ; 
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 2 ] = 4 ; 
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 3 ] = 8 ; 
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 4 ] = 16 ; 
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 5 ] = 32 ; 
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 6 ] = 64 ; 
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 7 ] = 128 ; 
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 8 ] = 256 ; 
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 9 ] = 512 ; 
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 10 ] = 1024 ; 
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 11 ] = 2048 ; 
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 12 ] = 4096 ; 
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 13 ] = 8192 ; 
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 14 ] = 16384 ; 
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0

// let twoToThe [ 15 ] = 16384 + 16384 ; 
push static 0
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return

// function int abs ( int x ) { 
function Math.abs 0

// if ( x < 0 ) { 
push argument 0
push constant 0
lt
not
if-goto L0

// let x = - x ; 
push argument 0
neg
pop argument 0
goto L1
label L0
label L1
push argument 0
return

// function int mod ( int x , int y ) { 

// var int rem ; 
function Math.mod 1

// let rem = x ; 
push argument 0
pop local 0

// while ( ~ ( rem < y ) ) { 
label L3
push local 0
push argument 1
lt
not
not
if-goto L2

// let rem = rem - y ; 
push local 0
push argument 1
sub
pop local 0
goto L3
label L2
push local 0
return

// function int pow ( int x , int y ) { 

// var int i , sum ; 
function Math.pow 2

// let sum = 1 ; 
push constant 1
pop local 1

// let i = 0 ; 
push constant 0
pop local 0

// while ( i < y ) { 
label L5
push local 0
push argument 1
lt
not
if-goto L4

// let sum = sum * x ; 
push local 1
push argument 0
call Math.multiply 2
pop local 1

// let i = i + 1 ; 
push local 0
push constant 1
add
pop local 0
goto L5
label L4
push local 1
return

// function boolean bit ( int x , int j ) { 
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return

// function int multiply ( int x , int y ) { 

// var int i , sum , shiftedX ; 
function Math.multiply 3

// let i = 0 ; 
push constant 0
pop local 0

// let sum = 0 ; 
push constant 0
pop local 1

// let shiftedX = x ; 
push argument 0
pop local 2

// while ( i < 16 ) { 
label L7
push local 0
push constant 16
lt
not
if-goto L6

// if ( Math . bit ( y , i ) ) { 
push argument 1
push local 0
call Math.bit 2
not
if-goto L8

// let sum = sum + shiftedX ; 
push local 1
push local 2
add
pop local 1
goto L9
label L8
label L9

// let shiftedX = shiftedX + shiftedX ; 
push local 2
push local 2
add
pop local 2

// let i = i + 1 ; 
push local 0
push constant 1
add
pop local 0
goto L7
label L6
push local 1
return

// function int divide ( int x , int y ) { 

// var int q , r ; 

// var boolean pos ; 
function Math.divide 3

// let pos = ( ( x < 0 ) = ( y < 0 ) ) ; 
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
pop local 2

// let x = Math . abs ( x ) ; 
push argument 0
call Math.abs 1
pop argument 0

// let y = Math . abs ( y ) ; 
push argument 1
call Math.abs 1
pop argument 1

// if ( ( y > x ) | ( y < 0 ) ) { 
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
not
if-goto L10
push constant 0
return
goto L11
label L10
label L11

// let q = Math . divide ( x , y + y ) ; 
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 0

// if ( ( x - ( 2 * q * y ) ) < y ) { 
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto L12

// let r = q + q ; 
push local 0
push local 0
add
pop local 1
goto L13
label L12

// let r = q + q + 1 ; 
push local 0
push local 0
add
push constant 1
add
pop local 1
label L13

// if ( pos ) { 
push local 2
not
if-goto L14
push local 1
return
goto L15
label L14
push local 1
neg
return
label L15

// function int sqrt ( int x ) { 

// var int j , y , z , p ; 
function Math.sqrt 4

// let y = 0 ; 
push constant 0
pop local 1

// let j = 7 ; 
push constant 7
pop local 0

// let p = Math . pow ( 2 , j ) ; 
push constant 2
push local 0
call Math.pow 2
pop local 3

// while ( j > - 1 ) { 
label L17
push local 0
push constant 1
neg
gt
not
if-goto L16

// let z = y + p ; 
push local 1
push local 3
add
pop local 2

// if ( ( ~ ( ( z * z ) > x ) ) & ( z * z > 0 ) ) { 
push local 2
push local 2
call Math.multiply 2
push argument 0
gt
not
push local 2
push local 2
call Math.multiply 2
push constant 0
gt
and
not
if-goto L18

// let y = z ; 
push local 2
pop local 1
goto L19
label L18
label L19

// let p = p / 2 ; 
push local 3
push constant 2
call Math.divide 2
pop local 3

// let j = j - 1 ; 
push local 0
push constant 1
sub
pop local 0
goto L17
label L16
push local 1
return

// function int max ( int a , int b ) { 
function Math.max 0

// if ( a > b ) { 
push argument 0
push argument 1
gt
not
if-goto L20
push argument 0
return
goto L21
label L20
push argument 1
return
label L21

// function int min ( int a , int b ) { 
function Math.min 0

// if ( a < b ) { 
push argument 0
push argument 1
lt
not
if-goto L22
push argument 0
return
goto L23
label L22
push argument 1
return
label L23
