<class>
  <keyword> class </keyword>
  <identifier> Math </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> Array </identifier>
    <identifier>
      <name> twoToThe </name>
      <type> Array </type>
      <kind> static </kind>
      <index> 0 </index>
    </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> init </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 16 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 4 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 3 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 8 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 4 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 16 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 32 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 64 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 7 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 128 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 8 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 256 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 9 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 512 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1024 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 11 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2048 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 12 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 4096 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 13 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 8192 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 14 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 16384 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> twoToThe </identifier>
          <symbol> [ </symbol>
          <expression>
            <term>
              <integerConstant> 15 </integerConstant>
            </term>
          </expression>
          <symbol> ] </symbol>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 16384 </integerConstant>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 16384 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> abs </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> x </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> - </symbol>
                  <term>
                    <identifier> x </identifier>
                  </term>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> mod </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <name> rem </name>
          <type> int </type>
          <kind> local </kind>
          <index> 0 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> rem </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> rem </identifier>
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier> y </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> rem </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> rem </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <identifier> y </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> rem </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> pow </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <name> i </name>
          <type> int </type>
          <kind> local </kind>
          <index> 0 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> sum </name>
          <type> int </type>
          <kind> local </kind>
          <index> 1 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sum </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> y </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> sum </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> sum </identifier>
                </term>
                <symbol> * </symbol>
                <term>
                  <identifier> x </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> sum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> boolean </keyword>
    <identifier> bit </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> j </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> x </identifier>
                      </term>
                      <symbol> &amp; </symbol>
                      <term>
                        <identifier> twoToThe </identifier>
                        <symbol> [ </symbol>
                        <expression>
                          <term>
                            <identifier> j </identifier>
                          </term>
                        </expression>
                        <symbol> ] </symbol>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> = </symbol>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> multiply </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <name> i </name>
          <type> int </type>
          <kind> local </kind>
          <index> 0 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> sum </name>
          <type> int </type>
          <kind> local </kind>
          <index> 1 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> shiftedX </name>
          <type> int </type>
          <kind> local </kind>
          <index> 2 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> sum </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> shiftedX </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 16 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> Math </identifier>
                  <symbol> . </symbol>
                  <identifier> bit </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier> y </identifier>
                      </term>
                    </expression>
                    <symbol> , </symbol>
                    <expression>
                      <term>
                        <identifier> i </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> sum </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> sum </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier> shiftedX </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> shiftedX </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> shiftedX </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> shiftedX </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> i </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> i </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> sum </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> divide </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> y </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <name> q </name>
          <type> int </type>
          <kind> local </kind>
          <index> 0 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> r </name>
          <type> int </type>
          <kind> local </kind>
          <index> 1 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier>
          <name> pos </name>
          <type> boolean </type>
          <kind> local </kind>
          <index> 2 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> pos </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> = </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> x </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> y </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                </term>
                <symbol> &gt; </symbol>
                <term>
                  <identifier> x </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> | </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> q </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> divide </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> y </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <integerConstant> 2 </integerConstant>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier> q </identifier>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier> y </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> y </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> r </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> q </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> q </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> r </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> q </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> q </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> pos </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier> r </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <symbol> - </symbol>
                  <term>
                    <identifier> r </identifier>
                  </term>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> sqrt </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> x </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <name> j </name>
          <type> int </type>
          <kind> local </kind>
          <index> 0 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> y </name>
          <type> int </type>
          <kind> local </kind>
          <index> 1 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> z </name>
          <type> int </type>
          <kind> local </kind>
          <index> 2 </index>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <name> p </name>
          <type> int </type>
          <kind> local </kind>
          <index> 3 </index>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> j </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 7 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> p </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> pow </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 2 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> j </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> j </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <symbol> - </symbol>
              <term>
                <integerConstant> 1 </integerConstant>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> z </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> p </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                                <identifier> z </identifier>
                              </term>
                              <symbol> * </symbol>
                              <term>
                                <identifier> z </identifier>
                              </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                          <symbol> &gt; </symbol>
                          <term>
                            <identifier> x </identifier>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> z </identifier>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier> z </identifier>
                    </term>
                    <symbol> &gt; </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> y </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> z </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> p </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> p </identifier>
                </term>
                <symbol> / </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> j </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> j </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> y </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> max </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> a </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> b </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> a </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <identifier> b </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier> a </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier> b </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier> min </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> a </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> b </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> a </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier> b </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier> a </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier> b </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
